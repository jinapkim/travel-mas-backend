{
	"info": {
		"_postman_id": "c28045c9-3e86-45f7-b2ed-a350544fa7d4",
		"name": "UserEndpointsRunFirst",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23821509"
	},
	"item": [
		{
			"name": "201, /register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": {\"type\": \"number\"},",
							"        \"user_name\": {\"type\": \"string\"}",
							"    },",
							"    \"required\": [\"id\", \"user_name\"]",
							"};",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"Test id and username in response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(1);",
							"    pm.expect(jsonData.user_name).to.eql(\"abratcher\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Adam\",\n    \"last_name\": \"Bratcher\",\n    \"user_name\": \"abratcher\",\n    \"password\": \"Hel!o,TravelM@5\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/register",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "201, /register 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"id\": {\"type\": \"number\"},",
							"        \"user_name\": {\"type\": \"string\"}",
							"    },",
							"    \"required\": [\"id\", \"user_name\"]",
							"};",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"Test id and username in response\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.id).to.eql(2);",
							"    pm.expect(jsonData.user_name).to.eql(\"asalley\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Amy\",\n    \"last_name\": \"Salley\",\n    \"user_name\": \"asalley\",\n    \"password\": \"Pa$$word123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/register",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "400, /register Duplicate user_name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"message\": {\"type\": \"string\"},",
							"    },",
							"    \"required\": [\"message\"]",
							"};",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"pm.test(\"Test Error Message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Invalid Username. Username already taken.\")",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Adam\",\n    \"last_name\": \"Bratcher\",\n    \"user_name\": \"abratcher\",\n    \"password\": \"Hel!o,TravelM@5\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/register",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "400, /register missing field",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"first_name\": \"Adam\",\n    \"user_name\": \"abratcher\",\n    \"password\": \"Hel!o,TravelM@5\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/register",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "201, LoginUser 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"access_token\": {\"type\": \"string\"},",
							"        \"refresh_token\": {\"type\": \"string\"}",
							"    }",
							"};",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"const jsonResponse = pm.response.json();",
							"pm.environment.set(\"access_token_1\", jsonResponse.access_token)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_name\": \"abratcher\",\n    \"password\": \"Hel!o,TravelM@5\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/login",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "201, LoginUser 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {",
							"    \"type\": \"object\",",
							"    \"properties\": {",
							"        \"access_token\": {\"type\": \"string\"},",
							"        \"refresh_token\": {\"type\": \"string\"}",
							"    }",
							"};",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"",
							"const jsonResponse = pm.response.json();",
							"pm.environment.set(\"access_token_2\", jsonResponse.access_token)",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user_name\": \"asalley\",\n    \"password\": \"Pa$$word123!\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/login",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}